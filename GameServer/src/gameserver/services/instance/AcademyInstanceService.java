/** * This file is part of Aion Galaxy Emu <aiongemu.com> * *  This is free software: you can redistribute it and/or modify *  it under the terms of the GNU Lesser Public License as published by *  the Free Software Foundation, either version 3 of the License, or *  (at your option) any later version. * *  This software is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *  GNU Lesser Public License for more details. * *  You should have received a copy of the GNU Lesser Public License *  along with this software.  If not, see <http://www.gnu.org/licenses/>. */package gameserver.services.instance;import java.util.Collection;import java.util.Iterator;import java.util.List;import gameserver.controllers.CreatureController;import gameserver.controllers.MonsterController;import gameserver.dataholders.AcademyBoxData;import gameserver.dataholders.AcademyData;import gameserver.dataholders.AcademyShigoData;import gameserver.dataholders.AcademyTeleportData;import gameserver.dataholders.DataManager;import gameserver.dataholders.SpawnsData;import gameserver.model.Race;import gameserver.model.academy.AcademyBox;import gameserver.model.academy.AcademyRound;import gameserver.model.academy.AcademyShigoStage;import gameserver.model.academy.AcademyStage;import gameserver.model.academy.AcademyTeleportStage;import gameserver.model.gameobjects.AionObject;import gameserver.model.gameobjects.Creature;import gameserver.model.gameobjects.Monster;import gameserver.model.gameobjects.Npc;import gameserver.model.gameobjects.VisibleObject;import gameserver.model.gameobjects.player.Player;import gameserver.model.gameobjects.player.PlayerCommonData;import gameserver.model.gameobjects.player.Storage;import gameserver.model.gameobjects.stats.PlayerLifeStats;import gameserver.model.group.PlayerGroup;import gameserver.model.templates.NpcTemplate;import gameserver.model.templates.academy.AcademyBoxSpawn;import gameserver.model.templates.academy.AcademyReSpawnTemplate;import gameserver.model.templates.academy.AcademyShigoEndSpawnList;import gameserver.model.templates.academy.AcademySpawnList;import gameserver.model.templates.academy.AcademySpawnTemplate;import gameserver.model.templates.spawn.SpawnTemplate;import gameserver.network.aion.serverpackets.SM_ARENA_STATUS;import gameserver.network.aion.serverpackets.SM_INSTANCE_SCORE;import gameserver.network.aion.serverpackets.SM_QUEST_ACCEPTED;import gameserver.network.aion.serverpackets.SM_SYSTEM_MESSAGE;import gameserver.services.InstanceService;import gameserver.services.ItemService;import gameserver.services.TeleportService;import gameserver.spawnengine.SpawnEngine;import gameserver.utils.PacketSendUtility;import gameserver.utils.ThreadPoolManager;import gameserver.world.World;import gameserver.world.WorldMapInstance;import gameserver.world.WorldMapType;import com.aionemu.commons.utils.Rnd;public class AcademyInstanceService{	private static final int code[] = {	35464, 36464, 37464, 38464, 8392, 43856, 13784, 49248, 19176, 54640	};	private static final int typeArray[] = {1, 1, 1, 1, 3, 4, 6, 7, 9, 10};	public AcademyInstanceService() {		/* super(); */		/* return; */	}	public static boolean isAcademyInstance(int i) {		return i == WorldMapType.EMPYREAN_CRUCIBLE.getId();	}	public void spawnMonster(PlayerGroup playergroup) {		AcademyStage academystage = DataManager.ACADEMY_DATA.getSpawnsForStage(playergroup.getGroupArenaStage());		if (academystage == null)			return;		WorldMapInstance worldmapinstance = InstanceService.getRegisteredInstance(WorldMapType.EMPYREAN_CRUCIBLE.getId(), playergroup.getGroupId());		Iterator iterator = academystage.getAcademyRound().iterator();		do {			if (!iterator.hasNext())				break;			AcademyRound academyround = (AcademyRound)iterator.next();			if (academyround.getRound() == playergroup.getGroupArenaRound()) {				Iterator iterator1 = academyround.getAcademySpawn().iterator();				do {					if (!iterator1.hasNext())						break;					AcademySpawnList academyspawnlist = (AcademySpawnList)iterator1.next();					if (academyspawnlist == null)						return;					if (academyspawnlist.getRace() == playergroup.getGroupLeader().getCommonData().getRace()) {						playergroup.setGroupArenaPool(playergroup.getGroupArenaPool() + academyspawnlist.getPool());						playergroup.setAcademyTime(System.currentTimeMillis() + (long)(academyround.getTime() * 1000));						Iterator iterator2 = academyspawnlist.getObjects().iterator();						while (iterator2.hasNext())  {							AcademySpawnTemplate academyspawntemplate = (AcademySpawnTemplate)iterator2.next();							academyspawntemplate.setSpawnGroup(academyspawnlist);							gameserver.model.templates.spawn.SpawnTemplate spawntemplate = SpawnEngine.getInstance().addNewSpawn(academyspawntemplate.getWorldId(), worldmapinstance.getInstanceId(), academyspawntemplate.getNpcId(), academyspawntemplate.getX(), academyspawntemplate.getY(), academyspawntemplate.getZ(), academyspawntemplate.getHeading(), 0, 0, true);							gameserver.model.gameobjects.VisibleObject visibleobject = SpawnEngine.getInstance().spawnObject(spawntemplate, worldmapinstance.getInstanceId());							Creature creature = (Creature)visibleobject;							ThreadPoolManager.getInstance().schedule(((Runnable) (new AcademyInstanceService$1(this, creature, playergroup))), academyround.getTime() * 1000);						}					}				} while (true);				startTimer(playergroup, academyround.getTime());			}		} while (true);		/* return; */	}	private void spawnBox(PlayerGroup playergroup) {		AcademyBox academybox = DataManager.ACADEMY_BOX_DATA.getSpawnsBox(WorldMapType.EMPYREAN_CRUCIBLE.getId());		if (academybox == null)			return;		WorldMapInstance worldmapinstance = InstanceService.getRegisteredInstance(WorldMapType.EMPYREAN_CRUCIBLE.getId(), playergroup.getGroupId());		gameserver.model.templates.spawn.SpawnTemplate spawntemplate;		for (Iterator iterator = academybox.getBoxTemplate().iterator(); iterator.hasNext(); SpawnEngine.getInstance().spawnObject(spawntemplate, worldmapinstance.getInstanceId())) {			AcademyBoxSpawn academyboxspawn = (AcademyBoxSpawn)iterator.next();			academyboxspawn.setSpawnGroup(academybox);			spawntemplate = SpawnEngine.getInstance().addNewSpawn(academyboxspawn.getWorldId(), worldmapinstance.getInstanceId(), academyboxspawn.getNpcId(), academyboxspawn.getX(), academyboxspawn.getY(), academyboxspawn.getZ(), academyboxspawn.getHeading(), 0, 0, true);		}		/* return; */	}	private void removeNpc(Monster monster) {		AionObject aionobject = World.getInstance().findAionObject(monster.getObjectId().intValue());		if (aionobject instanceof Monster) {			Monster monster1 = (Monster)aionobject;			if (monster1 != null)				monster1.getController().onDespawn(true);		}		/* return; */	}    private void startTimer(PlayerGroup playergroup, int i) {		Iterator iterator = playergroup.getMembers().iterator();		do {			if (!iterator.hasNext())				break;			Player player = (Player)iterator.next();			if (player.getWorldId() == WorldMapType.EMPYREAN_CRUCIBLE.getId())				PacketSendUtility.sendPacket(player, ((gameserver.network.aion.AionServerPacket) (new SM_QUEST_ACCEPTED(4, 0, i))));		} while (true);		/* return; */	}    private void stopTimer(PlayerGroup playergroup) {		Iterator iterator = playergroup.getMembers().iterator();		do {			if (!iterator.hasNext())				break;			Player player = (Player)iterator.next();			if (player.getWorldId() == WorldMapType.EMPYREAN_CRUCIBLE.getId())				PacketSendUtility.sendPacket(player, ((gameserver.network.aion.AionServerPacket) (new SM_QUEST_ACCEPTED(4, 0, 0))));		} while (true);		/* return; */	}   	private void failTimer(PlayerGroup playergroup) {		Iterator iterator = playergroup.getMembers().iterator();		do {			if (!iterator.hasNext())				break;			Player player = (Player)iterator.next();			if (player.getWorldId() == WorldMapType.EMPYREAN_CRUCIBLE.getId())				doReward(playergroup, player);		} while (true);		playergroup.setGroupArenaPool(0);		playergroup.setGroupArenaRound(0);		playergroup.setGroupArenaStage(0);		/* return; */	}	private void returnTimer(PlayerGroup playergroup) {		Iterator iterator = playergroup.getMembers().iterator();		do {			if (!iterator.hasNext())				break;			Player player = (Player)iterator.next();			if (player.getWorldId() == WorldMapType.EMPYREAN_CRUCIBLE.getId())				doReward(playergroup, player);		} while (true);		/* return; */	}    public void exitArena(Player player) {		PacketSendUtility.sendPacket(player, ((gameserver.network.aion.AionServerPacket) (new SM_QUEST_ACCEPTED(4, 0, 0))));		int i = Rnd.get(1, 2);		int j = Rnd.get(1, 8);		if (player.getWorldId() == WorldMapType.EMPYREAN_CRUCIBLE.getId())			if (player.getCommonData().getRace() == Race.ASMODIANS)				TeleportService.teleportTo(player, WorldMapType.MARCHUTAN_PRIORY.getId(), 571f, 260f, 93.48F, 3000);			else				TeleportService.teleportTo(player, WorldMapType.KAISINEL_ACADEMY.getId(), 510f, 230f, 126.9759F, 3000);		PlayerGroup playergroup = player.getPlayerGroup();		Iterator iterator = playergroup.getMembers().iterator();		do {			if (!iterator.hasNext())				break;			Player player1 = (Player)iterator.next();			if (!((Object) (player1)).equals(((Object) (player))))				PacketSendUtility.sendPacket(player1, ((gameserver.network.aion.AionServerPacket) (SM_SYSTEM_MESSAGE.STR_MSG_FRIENDLY_LEAVE_IDARENA(player.getName()))));		} while (true);		player.setInstancePlayerScore(0);		/* return; */	}    public void doReward(PlayerGroup playergroup, Player player) {		if (player.getInAcademy()) {			int i = (int)((playergroup.getInstanceStartTime() + 0xdbba00L) - System.currentTimeMillis());			if (player.getInventory().getItemCountByItemId(0xb1622fc) > 0L)				player.getInventory().removeFromBagByItemId(0xb1622fc, player.getInventory().getItemCountByItemId(0xb1622fc));			ItemService.addItem(player, 0xb162302, Math.round(player.getInstancePlayerScore() / 60));			PacketSendUtility.sendPacket(player, ((gameserver.network.aion.AionServerPacket) (new SM_INSTANCE_SCORE(WorldMapType.EMPYREAN_CRUCIBLE.getId(), i, playergroup, true))));			player.setInAcademy(false);			player.setInAcademyRevive(false);		}		/* return; */	}    public void nextSpawn(PlayerGroup playergroup) {		Iterator iterator = playergroup.getMembers().iterator();		do {			if (!iterator.hasNext())				break;			Player player = (Player)iterator.next();			if (player.getWorldId() == WorldMapType.EMPYREAN_CRUCIBLE.getId()) {				PacketSendUtility.sendPacket(player, ((gameserver.network.aion.AionServerPacket) (new SM_QUEST_ACCEPTED(4, 0, 10))));				if (playergroup.getGroupArenaStage() == 1 && playergroup.getGroupArenaRound() == 0)					PacketSendUtility.sendPacket(player, ((gameserver.network.aion.AionServerPacket) (new SM_ARENA_STATUS(2, 35464, 1))));			}		} while (true);		ThreadPoolManager.getInstance().schedule(((Runnable) (new AcademyInstanceService$2(this, playergroup))), 10000L);		/* return; */	}	private void spawnShigo(PlayerGroup playergroup) {		AcademyShigoStage academyshigostage = DataManager.ACADEMY_SHIGO_DATA.getSpawnsForStage(playergroup.getGroupArenaStage());		if (academyshigostage == null)			return;		WorldMapInstance worldmapinstance = InstanceService.getRegisteredInstance(WorldMapType.EMPYREAN_CRUCIBLE.getId(), playergroup.getGroupId());		sendEndStageMessage(playergroup);		if (playergroup.getGroupArenaStage() == 1)			spawnBox(playergroup);		AcademyShigoEndSpawnList academyshigoendspawnlist = academyshigostage.getShigoEnd();		gameserver.model.templates.spawn.SpawnTemplate spawntemplate = SpawnEngine.getInstance().addNewSpawn(academyshigoendspawnlist.getMapid(), worldmapinstance.getInstanceId(), academyshigoendspawnlist.getNpcid(), academyshigoendspawnlist.getX(), academyshigoendspawnlist.getY(), academyshigoendspawnlist.getZ(), (byte)0, 0, 0, true);		gameserver.model.gameobjects.VisibleObject visibleobject = SpawnEngine.getInstance().spawnObject(spawntemplate, worldmapinstance.getInstanceId());		Npc npc = (Npc)visibleobject;		PacketSendUtility.broadcastPacket(((gameserver.model.gameobjects.VisibleObject) (npc)), ((gameserver.network.aion.AionServerPacket) (new SM_SYSTEM_MESSAGE(shigoDialog(playergroup), true, npc.getObjectId().intValue(), new Object[0]))), 30);		/* return; */	}    private int shigoDialog(PlayerGroup playergroup) {		int i = playergroup.getGroupArenaStage();		switch (i) {		case 1: // '\001'			return 0x10f59b;		case 2: // '\002'			return 0x10f5a5;		case 3: // '\003'			return 0x10f5a6;		case 4: // '\004'			return 0x10f5a7;		case 5: // '\005'			return 0x10f5a8;		case 6: // '\006'			return 0x10f5a9;		case 7: // '\007'			return 0x10f5aa;		case 8: // '\b'			return 0x10f5ab;		case 9: // '\t'			return 0x10f5ac;		case 10: // '\n'			return 0x10f5ad;		}		return 0;	}	private void sendMassage(PlayerGroup playergroup) {		int i = (int)((playergroup.getInstanceStartTime() + 0xdbba00L) - System.currentTimeMillis());		Iterator iterator = playergroup.getMembers().iterator();		do {			if (!iterator.hasNext())				break;			Player player = (Player)iterator.next();			if (player.getWorldId() == WorldMapType.EMPYREAN_CRUCIBLE.getId())				PacketSendUtility.sendPacket(player, ((gameserver.network.aion.AionServerPacket) (new SM_INSTANCE_SCORE(WorldMapType.EMPYREAN_CRUCIBLE.getId(), i, playergroup, false))));		} while (true);		/* return; */	}	private void sendPointMessage(PlayerGroup playergroup, int i, Monster monster) {		Iterator iterator = playergroup.getMembers().iterator();		do {			if (!iterator.hasNext())				break;			Player player = (Player)iterator.next();			if (player.getWorldId() == WorldMapType.EMPYREAN_CRUCIBLE.getId())				PacketSendUtility.sendPacket(player, ((gameserver.network.aion.AionServerPacket) (SM_SYSTEM_MESSAGE.STR_MSG_GET_SCORE(i, monster.getObjectTemplate().getNameId()))));		} while (true);		/* return; */	}    private void sendStartRoundAndStageMessage(PlayerGroup playergroup) {		Iterator iterator = playergroup.getMembers().iterator();		do {			if (!iterator.hasNext())				break;			Player player = (Player)iterator.next();			if (player.getWorldId() == WorldMapType.EMPYREAN_CRUCIBLE.getId())				PacketSendUtility.sendPacket(player, ((gameserver.network.aion.AionServerPacket) (SM_SYSTEM_MESSAGE.STR_MSG_INSTANCE_JOIN_ROUND_IDARENA(playergroup.getGroupArenaStage(), playergroup.getGroupArenaRound()))));		} while (true);		/* return; */	}    private void sendStartRoundMessage(PlayerGroup playergroup) {		Iterator iterator = playergroup.getMembers().iterator();		do {			if (!iterator.hasNext())				break;			Player player = (Player)iterator.next();			if (player.getWorldId() == WorldMapType.EMPYREAN_CRUCIBLE.getId()) {				PacketSendUtility.sendPacket(player, ((gameserver.network.aion.AionServerPacket) (SM_SYSTEM_MESSAGE.STR_MSG_INSTANCE_START_ROUND_IDARENA(playergroup.getGroupArenaRound()))));				PacketSendUtility.sendPacket(player, ((gameserver.network.aion.AionServerPacket) (new SM_ARENA_STATUS(2, code[playergroup.getGroupArenaStage() - 1] + playergroup.getGroupArenaRound(), typeArray[playergroup.getGroupArenaStage() - 1]))));			}		} while (true);		/* return; */	}	private void sendEndRoundMessage(PlayerGroup playergroup) {		Iterator iterator = playergroup.getMembers().iterator();		do {			if (!iterator.hasNext())				break;			Player player = (Player)iterator.next();			if (player.getWorldId() == WorldMapType.EMPYREAN_CRUCIBLE.getId())				PacketSendUtility.sendPacket(player, ((gameserver.network.aion.AionServerPacket) (SM_SYSTEM_MESSAGE.STR_MSG_INSTANCE_COMPLETE_ROUND_IDARENA(playergroup.getGroupArenaRound()))));		} while (true);		/* return; */	}	private void sendEndStageMessage(PlayerGroup playergroup) {		Iterator iterator = playergroup.getMembers().iterator();		do {			if (!iterator.hasNext())				break;			Player player = (Player)iterator.next();			if (player.getWorldId() == WorldMapType.EMPYREAN_CRUCIBLE.getId()) {				PacketSendUtility.sendPacket(player, ((gameserver.network.aion.AionServerPacket) (SM_SYSTEM_MESSAGE.STR_MSG_INSTANCE_COMPLETE_STAGE_IDARENA(playergroup.getGroupArenaStage()))));				PacketSendUtility.sendPacket(player, ((gameserver.network.aion.AionServerPacket) (new SM_ARENA_STATUS(2, playergroup.getGroupArenaStage() * 1000 + 105, 0))));			}		} while (true);		/* return; */	}    public void onGroupReward(Monster monster, PlayerGroup playergroup) {		playergroup.setInstanceKills(playergroup.getInstanceKills() + 1);		int i = calculatePointsReward(monster);		if (i > 0)			sendPointMessage(playergroup, i, monster);		playergroup.setGroupInstancePoints(playergroup.getGroupInstancePoints() + i);		Object obj = ((Object) (playergroup.getMembers().iterator()));		do {			if (!((Iterator) (obj)).hasNext())				break;			Player player = (Player)((Iterator) (obj)).next();			if (!player.getInAcademyRevive() && !player.getLifeStats().isAlreadyDead() && player.getWorldId() == WorldMapType.EMPYREAN_CRUCIBLE.getId()) {				if (player.getInstancePlayerScore() == 0)					player.setInstancePlayerScore(playergroup.getGroupInstancePoints() - i);				player.setInstancePlayerScore(player.getInstancePlayerScore() + i);			}		} while (true);		removeNpc(monster);		obj = ((Object) (DataManager.ACADEMY_DATA.getSpawnsForStage(playergroup.getGroupArenaStage())));		if (obj == null)			return;		Iterator iterator = ((AcademyStage) (obj)).getAcademyRound().iterator();		do {			if (!iterator.hasNext())				break;			AcademyRound academyround = (AcademyRound)iterator.next();			if (academyround.getRound() == playergroup.getGroupArenaRound() && playergroup.getInstanceKills() == playergroup.getGroupArenaPool()) {				playergroup.setInstanceKills(0);				playergroup.setGroupArenaPool(0);				Iterator iterator1 = playergroup.getMembers().iterator();				do {					if (!iterator1.hasNext())						break;					Player player1 = (Player)iterator1.next();					if (!player1.getInAcademyRevive() && !player1.getLifeStats().isAlreadyDead() && player1.getWorldId() == WorldMapType.EMPYREAN_CRUCIBLE.getId())						player1.setInstancePlayerScore(player1.getInstancePlayerScore() + Math.round(playergroup.getAcademyTime() - System.currentTimeMillis()) / 1000);				} while (true);				stopTimer(playergroup);				nextSpawn(playergroup);				sendEndRoundMessage(playergroup);			}		} while (true);		sendMassage(playergroup);		/* return; */	}    private int calculatePointsReward(Monster monster) {		int i = 0;		int j = monster.getObjectTemplate().getTemplateId();		if (j == 0x3518e || j == 0x35185)			i = 600;		else		if (j == 0x35191 || j == 0x35188 || j == 0x35198 || j == 0x351db || j == 0x351bf || j == 0x351bc || j == 0x351bd || j == 0x351be)			i = 500;		else		if (j == 0x35194 || j == 0x3518b)			i = 1100;		else		if (j == 0x3518f || j == 0x35186)			i = 1200;		else		if (j == 0x35193 || j == 0x3518a)			i = 1300;		else		if (j == 0x35195 || j == 0x3518c || j == 0x351f7)			i = 5000;		else		if (j == 0x351ee || j == 0x351ea)			i = 2900;		else		if (j == 0x351ef || j == 0x351eb)			i = 3100;		else		if (j == 0x351f0 || j == 0x351ec)			i = 3300;		else		if (j == 0x351f1 || j == 0x351ed)			i = 3500;		else		if (j == 0x351f3 || j == 0x351f2)			i = 13000;		else		if (j == 0x351e0)			i = 480;		else		if (j == 0x351e1 || j == 0x35197 || j == 0x35199 || j == 0x3519b || j == 0x351b0 || j == 0x351b9 || j == 0x351bb)			i = 300;		else		if (j == 0x35196 || j == 0x3519b || j == 0x351de || j == 0x351c0)			i = 400;		else		if (j == 0x351b3 || j == 0x351b4 || j == 0x351b5 || j == 0x351b6)			i = 475;		else		if (j == 0x351b7 || j == 0x351b8)			i = 3250;		else		if (j == 0x351a7 || j == 0x351a8 || j == 0x351a9 || j == 0x351aa)			i = 55;		else		if (j == 0x351ab || j == 0x351ac || j == 0x351ad || j == 0x351ae)			i = 120;		else		if (j == 0x351af || j == 0x351b1 || j == 0x351b2)			i = 250;		else		if (j == 0x351d8 || j == 0x351d9)			i = 260;		else		if (j == 0x351da)			i = 340;		else		if (j == 0x351dc || j == 0x351dd || j == 0x351ba)			i = 350;		else		if (j == 0x351d5 || j == 0x351d6 || j == 0x351d7)			i = 280;		else		if (j == 0x351e2)			i = 700;		else		if (j == 0x351df || j == 0x351c7)			i = 2100;		else		if (j == 0x351e4)			i = 3370;		else		if (j == 0x3519c)			i = 1500;		else		if (j == 0x351c8)			i = 7800;		else		if (j == 0x351e5)			i = 8900;		else		if (j == 0x351f5)			i = 4000;		else		if (j == 0x351f6)			i = 4200;		else		if (j == 0x351f8)			i = 6000;		else		if (j == 0x351f9)			i = 17000;		else		if (j == 0x351fa)			i = 6200;		else		if (j == 0x351fb)			i = 7300;		else		if (j == 0x351fc || j == 0x351fd)			i = 4250;		else		if (j == 0x351fe)			i = 9400;		else		if (j == 0x351ff)			i = 25900;		else		if (j == 0x35200 || j == 0x35201 || j == 0x35202)			i = 1090;		else		if (j == 0x35203 || j == 0x35204 || j == 0x35205 || j == 0x35206)			i = 1390;		else		if (j == 0x35207)			i = 17800;		else		if (j == 0x35208)			i = 0x2eff4;		else		if (j == 0x35209)			i = 64000;		return i;	}	public void reviveMember(Player player) {		PlayerGroup playergroup = player.getPlayerGroup();		AcademyTeleportStage academyteleportstage = DataManager.ACADEMY_TELEPORT_DATA.getTeleportLocationForStage(playergroup.getGroupArenaStage());		if (academyteleportstage == null) {			return;		} else {			int i = Rnd.get(1, 3);			int j = Rnd.get(1, 4);			player.setInAcademyRevive(true);			AcademyReSpawnTemplate academyrespawntemplate = academyteleportstage.getRespawnTemplate();			TeleportService.teleportTo(player, academyrespawntemplate.getMapid(), academyrespawntemplate.getX(), academyrespawntemplate.getY(), academyrespawntemplate.getZ(), 0);			return;		}	}    public static AcademyInstanceService getInstance()  {        return SingletonHolder.instance;    }		@SuppressWarnings("synthetic-access")    private static class SingletonHolder {        protected static final AcademyInstanceService instance = new AcademyInstanceService();    }		static void access$000(AcademyInstanceService academyinstanceservice, PlayerGroup playergroup) {		academyinstanceservice.failTimer(playergroup);		/* return; */	}	static void access$100(AcademyInstanceService academyinstanceservice, PlayerGroup playergroup) {		academyinstanceservice.sendStartRoundAndStageMessage(playergroup);		/* return; */	}	static void access$200(AcademyInstanceService academyinstanceservice, PlayerGroup playergroup) {		academyinstanceservice.sendStartRoundMessage(playergroup);		/* return; */	}	static void access$300(AcademyInstanceService academyinstanceservice, PlayerGroup playergroup) {		academyinstanceservice.spawnShigo(playergroup);		/* return; */	}	static void access$400(AcademyInstanceService academyinstanceservice, PlayerGroup playergroup) {		academyinstanceservice.returnTimer(playergroup);		/* return; */	}	static  {		/* code = (new int[] {			35464, 36464, 37464, 38464, 8392, 43856, 13784, 49248, 19176, 54640		}); */		/* typeArray = (new int[] {			1, 1, 1, 1, 3, 4, 6, 7, 9, 10		}); */	}		class AcademyInstanceService$1	implements Runnable {	final Creature val$despawnObjectCreature;	final PlayerGroup val$group;	final AcademyInstanceService this$0;	AcademyInstanceService$1(AcademyInstanceService academyinstanceservice, Creature creature, PlayerGroup playergroup) {		this$0 = academyinstanceservice;		val$despawnObjectCreature = creature;		val$group = playergroup;		/* return; */	}	public void run() {		int i = val$despawnObjectCreature.getObjectId().intValue();		AionObject aionobject = World.getInstance().findAionObject(i);		if (aionobject != null && (aionobject instanceof Creature)) {			Creature creature = (Creature)aionobject;			DataManager.SPAWNS_DATA.removeSpawn(creature.getSpawn());			creature.getController().delete();			AcademyInstanceService.access$000(this$0, val$group);			}		/* return; */		}	}	class AcademyInstanceService$2 implements Runnable {	final PlayerGroup val$group;	final AcademyInstanceService this$0;	AcademyInstanceService$2(AcademyInstanceService academyinstanceservice, PlayerGroup playergroup) {		this$0 = academyinstanceservice;		val$group = playergroup;		/* return; */	}	public void run() {		AcademyStage academystage = DataManager.ACADEMY_DATA.getSpawnsForStage(val$group.getGroupArenaStage());		if (academystage == null)			return;		if (val$group.getGroupArenaRound() < academystage.size()) {			val$group.setGroupArenaRound(val$group.getGroupArenaRound() + 1);			AcademyInstanceService.access$100(this$0, val$group);			AcademyInstanceService.access$200(this$0, val$group);			this$0.spawnMonster(val$group);		} else		if (val$group.getGroupArenaStage() < DataManager.ACADEMY_DATA.size())			AcademyInstanceService.access$300(this$0, val$group);		else			AcademyInstanceService.access$400(this$0, val$group);		/* return; */		}	}}
